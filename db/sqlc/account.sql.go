// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
  name, balance, currency
) VALUES (
  $1, $2, $3
)
RETURNING acc_number, name, balance, currency, created_at
`

type CreateAccountParams struct {
	Name     string `json:"name"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Name, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.AccNumber,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE acc_number = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accNumber int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, accNumber)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT acc_number, name, balance, currency, created_at FROM account
WHERE acc_number = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, accNumber int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, accNumber)
	var i Account
	err := row.Scan(
		&i.AccNumber,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT acc_number, name, balance, currency, created_at FROM account
WHERE acc_number = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, accNumber int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, accNumber)
	var i Account
	err := row.Scan(
		&i.AccNumber,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAccount = `-- name: ListAccount :many
SELECT acc_number, name, balance, currency, created_at FROM account
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListAccountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccount(ctx context.Context, arg ListAccountParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.AccNumber,
			&i.Name,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateaAccountBal = `-- name: UpdateaAccountBal :one
UPDATE account 
SET balance = $2
WHERE acc_number = $1
RETURNING acc_number, name, balance, currency, created_at
`

type UpdateaAccountBalParams struct {
	AccNumber int64 `json:"acc_number"`
	Balance   int64 `json:"balance"`
}

func (q *Queries) UpdateaAccountBal(ctx context.Context, arg UpdateaAccountBalParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateaAccountBal, arg.AccNumber, arg.Balance)
	var i Account
	err := row.Scan(
		&i.AccNumber,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
