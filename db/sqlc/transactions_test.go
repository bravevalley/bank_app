package db

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/dassyareg/bank_app/utils"
	"github.com/stretchr/testify/require"
)

// TestNewTransaction tests the creation of new transaction
func createTransaction(t *testing.T) Transaction {
	newAcc := CreateAcc(t)

	want := NewTransactionParams{
		newAcc.AccNumber,
		utils.RandomAmount(),
	}

	tran, err := testQueries.NewTransaction(context.Background(), want)

	// We do no want errors
	require.NoError(t, err)

	// The returned value must not be empty
	require.NotEmpty(t, tran)

	// THe return information must contain the expected
	require.Equal(t, want.AccNumber, tran.AccNumber)
	require.Equal(t, want.Amount, tran.Amount)

	// The autogenerated values, must be auto generated
	require.NotZero(t, tran.ID)
	require.NotEmpty(t, tran.Date)

	return tran
}

// createMultipleTransactions  return slice of Transactions created and inserted with the same account number to the transactions table
func createMultipleTransations(t *testing.T) []Transaction {

	// Create a new account
	nwAcc := CreateAcc(t)

	// Persist the account number
	persistAcc := nwAcc.AccNumber

	// Declare the slice for the return
	var xTran []Transaction

	// Start a loop to execute the multiple querys
	for i := 0; i < 10; i++ {
		nwTranz := NewTransactionParams{
			AccNumber: persistAcc,
			Amount:    utils.RandomAmount(),
		}

		createdTranz, err := testQueries.NewTransaction(context.Background(), nwTranz)

		// We do no want errors
		require.NoError(t, err)

		// The returned value must not be empty
		require.NotEmpty(t, createdTranz)

		// THe return information must contain the expected
		require.Equal(t, nwTranz.AccNumber, createdTranz.AccNumber)
		require.Equal(t, nwTranz.Amount, createdTranz.Amount)

		// The autogenerated values, must be auto generated
		require.NotZero(t, createdTranz.ID)
		require.NotEmpty(t, createdTranz.Date)

		xTran = append(xTran, createdTranz)
	}

	// Check if the number transactions inserted was return - must be 10
	require.Len(t, xTran, 10)

	return xTran
}

func TestCreateNewTransaction(t *testing.T) {
	createTransaction(t)
}

func TestGetTransaction(t *testing.T) {
	newTranzaction := createTransaction(t)

	tran, err := testQueries.GetTransaction(context.Background(), newTranzaction.ID)

	// Check for error - should not return any errors
	require.NoError(t, err)

	// The return account should not be empty
	require.NotEmpty(t, tran)

	// All entries should be returned
	require.Equal(t, newTranzaction.AccNumber, tran.AccNumber)
	require.Equal(t, newTranzaction.Amount, tran.Amount)

	// Check if the time recorded is within the same second
	require.WithinDuration(t, newTranzaction.Date, tran.Date, time.Second)

}

func TestUpdateTransaction(t *testing.T) {
	tranz := createTransaction(t)

	want := UpdateaTransactionParams{
		ID:     tranz.ID,
		Amount: 400,
	}

	err := testQueries.UpdateaTransaction(context.Background(), want)
	require.NoError(t, err)

	got, err := testQueries.GetTransaction(context.Background(), tranz.ID)

	// Check for error - should not return any errors
	require.NoError(t, err)

	// The return account should not be empty
	require.NotEmpty(t, got)

	// All entries should be returned
	require.Equal(t, tranz.AccNumber, got.AccNumber)
	require.Equal(t, want.Amount, got.Amount)
	require.Equal(t, want.ID, got.ID)
}

func TestDeleteTransaction(t *testing.T) {
	tranz := createTransaction(t)

	err := testQueries.DeleteTransaction(context.Background(), tranz.ID)

	// Check the success of the query - No errors must be returned
	require.NoError(t, err)

	got, err := testQueries.GetTransaction(context.Background(), tranz.ID)

	// Check for error - should return any errors
	require.Error(t, err)

	// Check if the query retured a value - Must be empty
	require.Empty(t, got)

	// Check if the right error was return - ErrNoRows
	require.EqualError(t, err, sql.ErrNoRows.Error())

}

func TestListAllAccTransaction(t *testing.T) {
	// Create and insert multiple transactions with the same account numnber
	xTran := createMultipleTransations(t)

	q := ListAccTransactionsParams{
		AccNumber: xTran[0].AccNumber,
		Limit:     5,
		Offset:    5,
	}

	// List the transaction gotten for the account number
	xTranFromAcc, err := testQueries.ListAccTransactions(context.Background(), q)

	// Check for error - should not return any errors
	require.NoError(t, err)

	// The return account should not be empty
	require.NotEmpty(t, xTranFromAcc)

	// Check the number of transactions returned - must be 5
	require.Len(t, xTranFromAcc, 5)

	for _, v := range xTranFromAcc {
		require.NotEmpty(t, v)
	}
}
