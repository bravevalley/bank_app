// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dassyareg/bank_app/db/sqlc (interfaces: MsQ)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/dassyareg/bank_app/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockMsQ is a mock of MsQ interface.
type MockMsQ struct {
	ctrl     *gomock.Controller
	recorder *MockMsQMockRecorder
}

// MockMsQMockRecorder is the mock recorder for MockMsQ.
type MockMsQMockRecorder struct {
	mock *MockMsQ
}

// NewMockMsQ creates a new mock instance.
func NewMockMsQ(ctrl *gomock.Controller) *MockMsQ {
	mock := &MockMsQ{ctrl: ctrl}
	mock.recorder = &MockMsQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsQ) EXPECT() *MockMsQMockRecorder {
	return m.recorder
}

// AddAccountBal mocks base method.
func (m *MockMsQ) AddAccountBal(arg0 context.Context, arg1 db.AddAccountBalParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountBal", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccountBal indicates an expected call of AddAccountBal.
func (mr *MockMsQMockRecorder) AddAccountBal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountBal", reflect.TypeOf((*MockMsQ)(nil).AddAccountBal), arg0, arg1)
}

// CreateAccount mocks base method.
func (m *MockMsQ) CreateAccount(arg0 context.Context, arg1 db.CreateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockMsQMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockMsQ)(nil).CreateAccount), arg0, arg1)
}

// DeleteAccTransfers mocks base method.
func (m *MockMsQ) DeleteAccTransfers(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccTransfers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccTransfers indicates an expected call of DeleteAccTransfers.
func (mr *MockMsQMockRecorder) DeleteAccTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccTransfers", reflect.TypeOf((*MockMsQ)(nil).DeleteAccTransfers), arg0, arg1)
}

// DeleteAccount mocks base method.
func (m *MockMsQ) DeleteAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockMsQMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockMsQ)(nil).DeleteAccount), arg0, arg1)
}

// DeleteAllTransactions mocks base method.
func (m *MockMsQ) DeleteAllTransactions(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTransactions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllTransactions indicates an expected call of DeleteAllTransactions.
func (mr *MockMsQMockRecorder) DeleteAllTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTransactions", reflect.TypeOf((*MockMsQ)(nil).DeleteAllTransactions), arg0, arg1)
}

// DeleteTransaction mocks base method.
func (m *MockMsQ) DeleteTransaction(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockMsQMockRecorder) DeleteTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockMsQ)(nil).DeleteTransaction), arg0, arg1)
}

// DeleteTransfer mocks base method.
func (m *MockMsQ) DeleteTransfer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransfer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransfer indicates an expected call of DeleteTransfer.
func (mr *MockMsQMockRecorder) DeleteTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransfer", reflect.TypeOf((*MockMsQ)(nil).DeleteTransfer), arg0, arg1)
}

// ExecTransferTx mocks base method.
func (m *MockMsQ) ExecTransferTx(arg0 context.Context, arg1 db.TransferProcessParams) (db.SuccessfulTransferResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTransferTx", arg0, arg1)
	ret0, _ := ret[0].(db.SuccessfulTransferResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecTransferTx indicates an expected call of ExecTransferTx.
func (mr *MockMsQMockRecorder) ExecTransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTransferTx", reflect.TypeOf((*MockMsQ)(nil).ExecTransferTx), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockMsQ) GetAccount(arg0 context.Context, arg1 int64) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockMsQMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockMsQ)(nil).GetAccount), arg0, arg1)
}

// GetAccountForUpdate mocks base method.
func (m *MockMsQ) GetAccountForUpdate(arg0 context.Context, arg1 int64) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountForUpdate indicates an expected call of GetAccountForUpdate.
func (mr *MockMsQMockRecorder) GetAccountForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountForUpdate", reflect.TypeOf((*MockMsQ)(nil).GetAccountForUpdate), arg0, arg1)
}

// GetTransaction mocks base method.
func (m *MockMsQ) GetTransaction(arg0 context.Context, arg1 int64) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockMsQMockRecorder) GetTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockMsQ)(nil).GetTransaction), arg0, arg1)
}

// GetTransfer mocks base method.
func (m *MockMsQ) GetTransfer(arg0 context.Context, arg1 int64) (db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfer", arg0, arg1)
	ret0, _ := ret[0].(db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfer indicates an expected call of GetTransfer.
func (mr *MockMsQMockRecorder) GetTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfer", reflect.TypeOf((*MockMsQ)(nil).GetTransfer), arg0, arg1)
}

// ListAccTransactions mocks base method.
func (m *MockMsQ) ListAccTransactions(arg0 context.Context, arg1 db.ListAccTransactionsParams) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccTransactions", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccTransactions indicates an expected call of ListAccTransactions.
func (mr *MockMsQMockRecorder) ListAccTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccTransactions", reflect.TypeOf((*MockMsQ)(nil).ListAccTransactions), arg0, arg1)
}

// ListAccount mocks base method.
func (m *MockMsQ) ListAccount(arg0 context.Context, arg1 db.ListAccountParams) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccount", arg0, arg1)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccount indicates an expected call of ListAccount.
func (mr *MockMsQMockRecorder) ListAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccount", reflect.TypeOf((*MockMsQ)(nil).ListAccount), arg0, arg1)
}

// ListTransfers mocks base method.
func (m *MockMsQ) ListTransfers(arg0 context.Context, arg1 db.ListTransfersParams) ([]db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfers", arg0, arg1)
	ret0, _ := ret[0].([]db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfers indicates an expected call of ListTransfers.
func (mr *MockMsQMockRecorder) ListTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfers", reflect.TypeOf((*MockMsQ)(nil).ListTransfers), arg0, arg1)
}

// NewTransaction mocks base method.
func (m *MockMsQ) NewTransaction(arg0 context.Context, arg1 db.NewTransactionParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockMsQMockRecorder) NewTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockMsQ)(nil).NewTransaction), arg0, arg1)
}

// NewTransfer mocks base method.
func (m *MockMsQ) NewTransfer(arg0 context.Context, arg1 db.NewTransferParams) (db.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransfer", arg0, arg1)
	ret0, _ := ret[0].(db.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTransfer indicates an expected call of NewTransfer.
func (mr *MockMsQMockRecorder) NewTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransfer", reflect.TypeOf((*MockMsQ)(nil).NewTransfer), arg0, arg1)
}

// UpdateaAccountBal mocks base method.
func (m *MockMsQ) UpdateaAccountBal(arg0 context.Context, arg1 db.UpdateaAccountBalParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateaAccountBal", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateaAccountBal indicates an expected call of UpdateaAccountBal.
func (mr *MockMsQMockRecorder) UpdateaAccountBal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateaAccountBal", reflect.TypeOf((*MockMsQ)(nil).UpdateaAccountBal), arg0, arg1)
}

// UpdateaTransaction mocks base method.
func (m *MockMsQ) UpdateaTransaction(arg0 context.Context, arg1 db.UpdateaTransactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateaTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateaTransaction indicates an expected call of UpdateaTransaction.
func (mr *MockMsQMockRecorder) UpdateaTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateaTransaction", reflect.TypeOf((*MockMsQ)(nil).UpdateaTransaction), arg0, arg1)
}
